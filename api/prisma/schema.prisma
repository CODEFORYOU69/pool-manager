// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modèles pour stocker les données de la compétition

model Competition {
  id                 String   @id @default(uuid())
  name               String
  date               DateTime
  startTime          DateTime
  endTime            DateTime?
  roundDuration      Int      // en secondes
  breakDuration      Int      // en secondes
  breakFrequency     Int      // nombre de combats
  poolSize           Int      @default(4) // Nombre de participants par poule
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  // Relations
  groups             Group[]
  areas              Area[]
  participants       Participant[]
}

model Group {
  id                 String   @id @default(uuid())
  gender             String   // "male" ou "female"
  ageCategoryName    String
  ageCategoryMin     Int
  ageCategoryMax     Int
  weightCategoryName String
  weightCategoryMax  Int
  
  // Relations
  competitionId      String
  competition        Competition @relation(fields: [competitionId], references: [id], onDelete: Cascade)
  pools              Pool[]
  participants       ParticipantGroup[]
  matches            Match[]

  @@index([competitionId])
}

model Pool {
  id                 String   @id @default(uuid())
  poolIndex          Int
  
  // Relations
  groupId            String
  group              Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  poolParticipants   PoolParticipant[]
  matches            Match[]

  @@index([groupId])
}

model Participant {
  id                 String   @id @default(uuid())
  nom                String
  prenom             String
  sexe               String   // "male" ou "female"
  age                Int
  poids              Float
  ligue              String
  
  // Relations
  competitionId      String
  competition        Competition @relation(fields: [competitionId], references: [id], onDelete: Cascade)
  participantGroups  ParticipantGroup[]
  poolParticipants   PoolParticipant[]
  matchParticipants  MatchParticipant[]

  @@index([competitionId])
}

model ParticipantGroup {
  id                 String   @id @default(uuid())
  
  // Relations
  participantId      String
  participant        Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)
  groupId            String
  group              Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([participantId, groupId])
  @@index([participantId])
  @@index([groupId])
}

model PoolParticipant {
  id                 String   @id @default(uuid())
  
  // Relations
  poolId             String
  pool               Pool     @relation(fields: [poolId], references: [id], onDelete: Cascade)
  participantId      String
  participant        Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)

  @@unique([poolId, participantId])
  @@index([poolId])
  @@index([participantId])
}

model Area {
  id                 String   @id @default(uuid())
  areaNumber         Int
  
  // Relations
  competitionId      String
  competition        Competition @relation(fields: [competitionId], references: [id], onDelete: Cascade)
  matches            Match[]
  breaks             Break[]

  @@index([competitionId])
}

model Match {
  id                 String   @id @default(uuid())
  matchNumber        Int
  status             String   // "pending", "completed", "cancelled"
  startTime          DateTime
  endTime            DateTime?
  winner             String?  // "A", "B" ou null
  poolIndex          Int      // Ajout du champ poolIndex
  pointMatch         Int      @default(0) // Points attribués pour ce match (3 pour une victoire)
  
  // Relations
  groupId            String
  group              Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  poolId             String
  pool               Pool     @relation(fields: [poolId], references: [id], onDelete: Cascade)
  areaId             String
  area               Area     @relation(fields: [areaId], references: [id], onDelete: Cascade)
  matchParticipants  MatchParticipant[]
  rounds             Round[]

  @@index([groupId])
  @@index([poolId])
  @@index([areaId])
}

model MatchParticipant {
  id                 String   @id @default(uuid())
  position           String   // "A" ou "B"
  
  // Relations
  matchId            String
  match              Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)
  participantId      String
  participant        Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)

  @@unique([matchId, position])
  @@index([matchId])
  @@index([participantId])
}

model Round {
  id                 String   @id @default(uuid())
  roundNumber        Int      // 1, 2 ou 3
  scoreA             Int      @default(0)
  scoreB             Int      @default(0)
  winner             String?  // ID du participant gagnant ou null
  winnerPosition     String?  // "A", "B" ou null - identifie le côté gagnant
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  // Relations
  matchId            String
  match              Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)

  @@unique([matchId, roundNumber])
  @@index([matchId])
}

model Break {
  id                 String   @id @default(uuid())
  startTime          DateTime
  endTime            DateTime
  
  // Relations
  areaId             String
  area               Area     @relation(fields: [areaId], references: [id], onDelete: Cascade)

  @@index([areaId])
}